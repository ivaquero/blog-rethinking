[tool.ruff]
    fix = true
    fix-only = true
    target-version = "py310"
    line-length = 88

[tool.ruff.format]
    # Enable reformatting of code snippets in docstrings
    docstring-code-format = true
    # Format all docstring code snippets with a line length of 60
    docstring-code-line-length = 60
    # Use `\n` line endings for all files
    line-ending = "lf"
    # Prefer single quotes over double quotes
    quote-style = "double"
    skip-magic-trailing-comma = true

[tool.ruff.lint]
    extend-select = [
        "E",    # pycodestyle errors
        "W",    # pycodestyle warnings
        "F",    # pyflakes
        "B",    # flake8-bugbear
        "C4",   # flake8-comprehensions
        "EM",   # flake8-errmsg
        "EXE",  # flake8-executable
        "FA",   # flake8-future-annotations
        "G",    # flake8-logging-format
        "INT",  # flake8-gettext
        "PIE",  # flake8-pie
        "PT",   # flake8-pytest-style
        "PYI",  # flake8-pyi
        "Q",    # flake8-quotes
        "RET",  # flake8-return
        "RSE",  # flake8-raise
        "SLOT", # flake8-slots
        "T10",  # flake8-debugger
        "YTT",  # flake8-2020
        "DTZ",  # naive datetime
        "I",    # import sorting
        "ISC",  # string concatenation
        "NPY",  # numpy specific rules
        "PD",   # pandas-vet
        "PERF", # perflint
        "RUF",  # ruff
        "S",    # security
        "SIM",  # simplify
        "T10",  # debugger
        "TCH",  # type-checking imports
        "TID",  # tidy imports
        "UP",   # upgrade
    ]
    fixable = ["ALL"]
    ignore = [
        "B905",   # `zip()` without an explicit `strict=` parameter
        "EM101",  # exception must not use a string literal
        "EM102",  # exception must not use an f-string literal
        "ISC001", # conflicts with formatter
        "NPY002", # replace legacy `np.random.random`
        "E501",   # line too long
        "E741",
        "F403",
        "F405",
        "RUF001", # string contains ambiguous character (such as greek letters)
        "RUF002", # docstring contains ambiguous character (such as greek letters)
        "RUF003",
    ]
    unfixable = []

[tool.ruff.lint.pydocstyle]
    convention = "numpy"

[tool.ruff.lint.isort]
    case-sensitive = true
    combine-as-imports = true
    force-single-line = true
    force-wrap-aliases = true
    order-by-type = true
